// <auto-generated />
using System;
using Fmarketer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fmarketer.Models.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fmarketer.Models.Model.ConsultantCoverage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Location");

                    b.Property<int>("State");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("_ConsultantId");

                    b.HasKey("Id");

                    b.HasIndex("_ConsultantId");

                    b.ToTable("Consultantcoverages");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.ConsultantService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActiveSince");

                    b.Property<int>("ClientScale");

                    b.Property<string>("Company");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("LicenseActive");

                    b.Property<string>("Proof");

                    b.Property<string>("RegistrationNo");

                    b.Property<DateTime>("Updated");

                    b.Property<int>("YearsOfExp");

                    b.Property<Guid?>("_ConsultantId");

                    b.HasKey("Id");

                    b.HasIndex("_ConsultantId");

                    b.ToTable("ConsultantServices");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<int>("Service");

                    b.Property<DateTime>("Updated");

                    b.Property<Guid?>("_ConsultantId");

                    b.Property<Guid?>("_ReviewId");

                    b.Property<Guid?>("_UserId");

                    b.HasKey("Id");

                    b.HasIndex("_ConsultantId");

                    b.HasIndex("_ReviewId");

                    b.HasIndex("_UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Message");

                    b.Property<int>("Star");

                    b.Property<DateTime>("Updated");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthType");

                    b.Property<string>("Contact");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<bool>("ShowContact");

                    b.Property<bool>("ShowEmail");

                    b.Property<DateTime>("Updated");

                    b.Property<bool>("Verified");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.Consultant", b =>
                {
                    b.HasBaseType("Fmarketer.Models.Model.User");

                    b.Property<string>("Contact2");

                    b.Property<int>("ContactOpt");

                    b.Property<int>("ContactOpt2");

                    b.Property<string>("Email2");

                    b.ToTable("Consultant");

                    b.HasDiscriminator().HasValue("Consultant");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.ConsultantCoverage", b =>
                {
                    b.HasOne("Fmarketer.Models.Model.Consultant", "_Consultant")
                        .WithMany()
                        .HasForeignKey("_ConsultantId");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.ConsultantService", b =>
                {
                    b.HasOne("Fmarketer.Models.Model.Consultant", "_Consultant")
                        .WithMany()
                        .HasForeignKey("_ConsultantId");
                });

            modelBuilder.Entity("Fmarketer.Models.Model.Request", b =>
                {
                    b.HasOne("Fmarketer.Models.Model.Consultant", "_Consultant")
                        .WithMany()
                        .HasForeignKey("_ConsultantId");

                    b.HasOne("Fmarketer.Models.Model.Review", "_Review")
                        .WithMany()
                        .HasForeignKey("_ReviewId");

                    b.HasOne("Fmarketer.Models.Model.User", "_User")
                        .WithMany()
                        .HasForeignKey("_UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
